// generated by jsonenums -type=Capability; DO NOT EDIT

package capabilities

import (
	"encoding/json"
	"fmt"
)

var (
	_CapabilityNameToValue = map[string]Capability{
		"CreateUser":     CreateUser,
		"CreatePage":     CreatePage,
		"CreateArticle":  CreateArticle,
		"CreateCategory": CreateCategory,
		"CreateTaxonomy": CreateTaxonomy,
		"UploadPicture":  UploadPicture,
		"InstallTheme":   InstallTheme,
		"ReadUser":       ReadUser,
		"ReadPage":       ReadPage,
		"ReadArticle":    ReadArticle,
		"ReadCategory":   ReadCategory,
		"ReadTaxonomy":   ReadTaxonomy,
		"ReadPicture":    ReadPicture,
		"ReadTheme":      ReadTheme,
		"UpdateUser":     UpdateUser,
		"UpdatePage":     UpdatePage,
		"UpdateArticle":  UpdateArticle,
		"UpdateCategory": UpdateCategory,
		"UpdateTaxonomy": UpdateTaxonomy,
		"UpdatePicture":  UpdatePicture,
		"SwitchTheme":    SwitchTheme,
		"DeleteUser":     DeleteUser,
		"DeletePage":     DeletePage,
		"DeleteArticle":  DeleteArticle,
		"DeleteCategory": DeleteCategory,
		"DeleteTaxonomy": DeleteTaxonomy,
		"DeletePicture":  DeletePicture,
		"DeleteTheme":    DeleteTheme,
		"ManageConfigs":  ManageConfigs,
	}

	_CapabilityValueToName = map[Capability]string{
		CreateUser:     "CreateUser",
		CreatePage:     "CreatePage",
		CreateArticle:  "CreateArticle",
		CreateCategory: "CreateCategory",
		CreateTaxonomy: "CreateTaxonomy",
		UploadPicture:  "UploadPicture",
		InstallTheme:   "InstallTheme",
		ReadUser:       "ReadUser",
		ReadPage:       "ReadPage",
		ReadArticle:    "ReadArticle",
		ReadCategory:   "ReadCategory",
		ReadTaxonomy:   "ReadTaxonomy",
		ReadPicture:    "ReadPicture",
		ReadTheme:      "ReadTheme",
		UpdateUser:     "UpdateUser",
		UpdatePage:     "UpdatePage",
		UpdateArticle:  "UpdateArticle",
		UpdateCategory: "UpdateCategory",
		UpdateTaxonomy: "UpdateTaxonomy",
		UpdatePicture:  "UpdatePicture",
		SwitchTheme:    "SwitchTheme",
		DeleteUser:     "DeleteUser",
		DeletePage:     "DeletePage",
		DeleteArticle:  "DeleteArticle",
		DeleteCategory: "DeleteCategory",
		DeleteTaxonomy: "DeleteTaxonomy",
		DeletePicture:  "DeletePicture",
		DeleteTheme:    "DeleteTheme",
		ManageConfigs:  "ManageConfigs",
	}
)

func init() {
	var v Capability
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_CapabilityNameToValue = map[string]Capability{
			interface{}(CreateUser).(fmt.Stringer).String():     CreateUser,
			interface{}(CreatePage).(fmt.Stringer).String():     CreatePage,
			interface{}(CreateArticle).(fmt.Stringer).String():  CreateArticle,
			interface{}(CreateCategory).(fmt.Stringer).String(): CreateCategory,
			interface{}(CreateTaxonomy).(fmt.Stringer).String(): CreateTaxonomy,
			interface{}(UploadPicture).(fmt.Stringer).String():  UploadPicture,
			interface{}(InstallTheme).(fmt.Stringer).String():   InstallTheme,
			interface{}(ReadUser).(fmt.Stringer).String():       ReadUser,
			interface{}(ReadPage).(fmt.Stringer).String():       ReadPage,
			interface{}(ReadArticle).(fmt.Stringer).String():    ReadArticle,
			interface{}(ReadCategory).(fmt.Stringer).String():   ReadCategory,
			interface{}(ReadTaxonomy).(fmt.Stringer).String():   ReadTaxonomy,
			interface{}(ReadPicture).(fmt.Stringer).String():    ReadPicture,
			interface{}(ReadTheme).(fmt.Stringer).String():      ReadTheme,
			interface{}(UpdateUser).(fmt.Stringer).String():     UpdateUser,
			interface{}(UpdatePage).(fmt.Stringer).String():     UpdatePage,
			interface{}(UpdateArticle).(fmt.Stringer).String():  UpdateArticle,
			interface{}(UpdateCategory).(fmt.Stringer).String(): UpdateCategory,
			interface{}(UpdateTaxonomy).(fmt.Stringer).String(): UpdateTaxonomy,
			interface{}(UpdatePicture).(fmt.Stringer).String():  UpdatePicture,
			interface{}(SwitchTheme).(fmt.Stringer).String():    SwitchTheme,
			interface{}(DeleteUser).(fmt.Stringer).String():     DeleteUser,
			interface{}(DeletePage).(fmt.Stringer).String():     DeletePage,
			interface{}(DeleteArticle).(fmt.Stringer).String():  DeleteArticle,
			interface{}(DeleteCategory).(fmt.Stringer).String(): DeleteCategory,
			interface{}(DeleteTaxonomy).(fmt.Stringer).String(): DeleteTaxonomy,
			interface{}(DeletePicture).(fmt.Stringer).String():  DeletePicture,
			interface{}(DeleteTheme).(fmt.Stringer).String():    DeleteTheme,
			interface{}(ManageConfigs).(fmt.Stringer).String():  ManageConfigs,
		}
	}
}

// MarshalJSON is generated so Capability satisfies json.Marshaler.
func (r Capability) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _CapabilityValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Capability: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Capability satisfies json.Unmarshaler.
func (r *Capability) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Capability should be a string, got %s", data)
	}
	v, ok := _CapabilityNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Capability %q", s)
	}
	*r = v
	return nil
}
