// generated by jsonenums -type=Visibility; DO NOT EDIT

package visibility

import (
	"encoding/json"
	"fmt"
)

var (
	_VisibilityNameToValue = map[string]Visibility{
		"Public":  Public,
		"Private": Private,
	}

	_VisibilityValueToName = map[Visibility]string{
		Public:  "Public",
		Private: "Private",
	}
)

func init() {
	var v Visibility
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_VisibilityNameToValue = map[string]Visibility{
			interface{}(Public).(fmt.Stringer).String():  Public,
			interface{}(Private).(fmt.Stringer).String(): Private,
		}
	}
}

// MarshalJSON is generated so Visibility satisfies json.Marshaler.
func (r Visibility) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _VisibilityValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Visibility: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Visibility satisfies json.Unmarshaler.
func (r *Visibility) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Visibility should be a string, got %s", data)
	}
	v, ok := _VisibilityNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Visibility %q", s)
	}
	*r = v
	return nil
}
