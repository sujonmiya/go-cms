// generated by jsonenums -type=Role src/models/roles/; DO NOT EDIT

package roles

import (
	"encoding/json"
	"fmt"
)

var (
	_RoleNameToValue = map[string]Role{
		"Administrator": Administrator,
		"Author":        Author,
		"Editor":        Editor,
		"Subscriber":    Subscriber,
	}

	_RoleValueToName = map[Role]string{
		Administrator: "Administrator",
		Author:        "Author",
		Editor:        "Editor",
		Subscriber:    "Subscriber",
	}
)

func init() {
	var v Role
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RoleNameToValue = map[string]Role{
			interface{}(Administrator).(fmt.Stringer).String(): Administrator,
			interface{}(Author).(fmt.Stringer).String():        Author,
			interface{}(Editor).(fmt.Stringer).String():        Editor,
			interface{}(Subscriber).(fmt.Stringer).String():    Subscriber,
		}
	}
}

// MarshalJSON is generated so Role satisfies json.Marshaler.
func (r Role) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RoleValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Role: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Role satisfies json.Unmarshaler.
func (r *Role) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Role should be a string, got %s", data)
	}
	v, ok := _RoleNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Role %q", s)
	}
	*r = v
	return nil
}
