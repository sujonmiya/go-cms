// generated by jsonenums -type=Gender; DO NOT EDIT

package gender

import (
	"encoding/json"
	"fmt"
)

var (
	_GenderNameToValue = map[string]Gender{
		"Male":   Male,
		"Female": Female,
	}

	_GenderValueToName = map[Gender]string{
		Male:   "Male",
		Female: "Female",
	}
)

func init() {
	var v Gender
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_GenderNameToValue = map[string]Gender{
			interface{}(Male).(fmt.Stringer).String():   Male,
			interface{}(Female).(fmt.Stringer).String(): Female,
		}
	}
}

// MarshalJSON is generated so Gender satisfies json.Marshaler.
func (r Gender) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _GenderValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Gender: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Gender satisfies json.Unmarshaler.
func (r *Gender) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Gender should be a string, got %s", data)
	}
	v, ok := _GenderNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Gender %q", s)
	}
	*r = v
	return nil
}
